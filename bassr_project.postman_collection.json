{
	"info": {
		"_postman_id": "f47e71cb-6fe2-4664-b609-658869b3bff9",
		"name": "portfolio",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13403679"
	},
	"item": [
		{
			"name": "Get all users(managers)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for 201 status code\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match1 w/ user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set match01 id environment variable from response",
							"pm.environment.set(\"match01_id\", pm.response.json()[\"id\"]);",
							"",
							"//Set user_id1 environment variable from response",
							"pm.environment.set(\"user_id1\", pm.response.json()[\"manager\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(2);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"coed\",\n    \"day\": 2\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match with missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is incorrect\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"day\": 2\n}"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid add match 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 406 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/css",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"coed\",\n    \"day\": 4\n}"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match without jwt auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 401 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Authorization Token is Incorrect/Expired/Missing\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/css",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"coed\",\n    \"day\": 4\n}"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match with incorrect jwt auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 401 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Authorization Token is Incorrect/Expired/Missing\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/css",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"coed\",\n    \"day\": 4\n}"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match01 (new match, no refs)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"    pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"    pm.expect(pm.response.json()[\"day\"]).to.eq(2);",
							"    pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"    //Check if the self url is correct",
							"       const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match01 with user2 jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 no content\", function () {",
							"    //Check for appropriate 403 code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Current user is not authorized\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    //Check for 404 response",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No match with this match_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{invalid_match_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{invalid_match_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match with incorrect jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 401 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Authorization Token is Incorrect/Expired/Missing\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match without jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 401 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Authorization Token is Incorrect/Expired/Missing\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match2 w/ user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set match01 id environment variable from response",
							"pm.environment.set(\"match02_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"male\",\n    \"day\": 5\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match3 w/ user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set match01 id environment variable from response",
							"pm.environment.set(\"match03_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(6);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"female\",\n    \"day\": 6\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match4 w/ user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set match04 id environment variable from response",
							"pm.environment.set(\"match04_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(1);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"female\",\n    \"day\": 1\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match5 w/ user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set match05 id environment variable from response",
							"pm.environment.set(\"match05_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(3);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"female\",\n    \"day\": 3\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all matches for jwt1 w/o pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 200 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"correct number of matches in response\", function () {",
							"    //Check for correct number of matches",
							"    pm.expect(pm.response.json()[\"match\"].length).to.equal(5);",
							"});",
							"",
							"pm.test(\"match01 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"match\"].forEach(match  =>{",
							"        if (match[\"id\"] === pm.environment.get(\"match01_id\")){",
							"            pm.expect(match[\"name\"]).to.eq(\"Curtis\");",
							"            pm.expect(match[\"league\"]).to.eq(\"coed\");",
							"            pm.expect(match[\"day\"]).to.eq(2);",
							"            pm.expect(match[\"refs\"]).to.deep.equal([]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/match/\" + match[\"id\"];",
							"            pm.expect(match[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"match02 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"match\"].forEach(match  =>{",
							"        if (match[\"id\"] === pm.environment.get(\"match02_id\")){",
							"            pm.expect(match[\"name\"]).to.eq(\"Curtis\");",
							"            pm.expect(match[\"league\"]).to.eq(\"male\");",
							"            pm.expect(match[\"day\"]).to.eq(5);",
							"            pm.expect(match[\"refs\"]).to.deep.equal([]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/match/\" + match[\"id\"];",
							"            pm.expect(match[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"match03 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"match\"].forEach(match  =>{",
							"        if (match[\"id\"] === pm.environment.get(\"match03_id\")){",
							"            pm.expect(match[\"name\"]).to.eq(\"Curtis\");",
							"            pm.expect(match[\"league\"]).to.eq(\"female\");",
							"            pm.expect(match[\"day\"]).to.eq(6);",
							"            pm.expect(match[\"refs\"]).to.deep.equal([]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/match/\" + match[\"id\"];",
							"            pm.expect(match[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"match04 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"match\"].forEach(match  =>{",
							"        if (match[\"id\"] === pm.environment.get(\"match04_id\")){",
							"            pm.expect(match[\"name\"]).to.eq(\"Curtis\");",
							"            pm.expect(match[\"league\"]).to.eq(\"female\");",
							"            pm.expect(match[\"day\"]).to.eq(1);",
							"            pm.expect(match[\"refs\"]).to.deep.equal([]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/match/\" + match[\"id\"];",
							"            pm.expect(match[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"match05 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"match\"].forEach(match  =>{",
							"        if (match[\"id\"] === pm.environment.get(\"match05_id\")){",
							"            pm.expect(match[\"name\"]).to.eq(\"Curtis\");",
							"            pm.expect(match[\"league\"]).to.eq(\"female\");",
							"            pm.expect(match[\"day\"]).to.eq(3);",
							"            pm.expect(match[\"refs\"]).to.deep.equal([]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/match/\" + match[\"id\"];",
							"            pm.expect(match[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match6 w/ user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set match06 id environment variable from response",
							"pm.environment.set(\"match06_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Reed\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(3);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Reed\",\n    \"league\": \"male\",\n    \"day\": 3\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match7 w/ user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set match07 id environment variable from response",
							"pm.environment.set(\"match07_id\", pm.response.json()[\"id\"]);",
							"",
							"//Set user_id2 environment variable from response",
							"pm.environment.set(\"user_id2\", pm.response.json()[\"manager\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Ford\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(2);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Ford\",\n    \"league\": \"coed\",\n    \"day\": 2\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match8 w/ user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set match08 id environment variable from response",
							"pm.environment.set(\"match08_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Ford\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Ford\",\n    \"league\": \"coed\",\n    \"day\": 5\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match9 w/ user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set match09 id environment variable from response",
							"pm.environment.set(\"match09_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Ford\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(6);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Ford\",\n    \"league\": \"male\",\n    \"day\": 6\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match10 w/ user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set match10 id environment variable from response",
							"pm.environment.set(\"match10_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(6);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Heart\",\n    \"league\": \"male\",\n    \"day\": 6\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match11 w/ user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set match11 id environment variable from response",
							"pm.environment.set(\"match11_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(3);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Heart\",\n    \"league\": \"female\",\n    \"day\": 3\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match12 w/ user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set match12 id environment variable from response",
							"pm.environment.set(\"match12_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(4);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Heart\",\n    \"league\": \"coed\",\n    \"day\": 4\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users(managers)2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for 201 status code\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid delete match route",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {\r",
							"    //Check for 405 status code\r",
							"    pm.response.to.have.status(405);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all matches without jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 401 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Authorization Token is Incorrect/Expired/Missing\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all matches with incorrect jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 401 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Authorization Token is Incorrect/Expired/Missing\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all matches for jwt1 w/ pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 200 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"correct number of matches in response\", function () {",
							"    //Check for correct number of matches",
							"    pm.expect(pm.response.json()[\"match\"].length).to.equal(5);",
							"});",
							"",
							"pm.test(\"match01 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"match\"].forEach(match  =>{",
							"        if (match[\"id\"] === pm.environment.get(\"match01_id\")){",
							"            pm.expect(match[\"name\"]).to.eq(\"Curtis\");",
							"            pm.expect(match[\"league\"]).to.eq(\"coed\");",
							"            pm.expect(match[\"day\"]).to.eq(2);",
							"            pm.expect(match[\"refs\"]).to.deep.equal([]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/match/\" + match[\"id\"];",
							"            pm.expect(match[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"match02 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"match\"].forEach(match  =>{",
							"        if (match[\"id\"] === pm.environment.get(\"match02_id\")){",
							"            pm.expect(match[\"name\"]).to.eq(\"Curtis\");",
							"            pm.expect(match[\"league\"]).to.eq(\"male\");",
							"            pm.expect(match[\"day\"]).to.eq(5);",
							"            pm.expect(match[\"refs\"]).to.deep.equal([]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/match/\" + match[\"id\"];",
							"            pm.expect(match[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"match03 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"match\"].forEach(match  =>{",
							"        if (match[\"id\"] === pm.environment.get(\"match03_id\")){",
							"            pm.expect(match[\"name\"]).to.eq(\"Curtis\");",
							"            pm.expect(match[\"league\"]).to.eq(\"female\");",
							"            pm.expect(match[\"day\"]).to.eq(6);",
							"            pm.expect(match[\"refs\"]).to.deep.equal([]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/match/\" + match[\"id\"];",
							"            pm.expect(match[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"match04 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"match\"].forEach(match  =>{",
							"        if (match[\"id\"] === pm.environment.get(\"match04_id\")){",
							"            pm.expect(match[\"name\"]).to.eq(\"Curtis\");",
							"            pm.expect(match[\"league\"]).to.eq(\"female\");",
							"            pm.expect(match[\"day\"]).to.eq(1);",
							"            pm.expect(match[\"refs\"]).to.deep.equal([]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/match/\" + match[\"id\"];",
							"            pm.expect(match[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"match05 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"match\"].forEach(match  =>{",
							"        if (match[\"id\"] === pm.environment.get(\"match05_id\")){",
							"            pm.expect(match[\"name\"]).to.eq(\"Curtis\");",
							"            pm.expect(match[\"league\"]).to.eq(\"female\");",
							"            pm.expect(match[\"day\"]).to.eq(3);",
							"            pm.expect(match[\"refs\"]).to.deep.equal([]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/match/\" + match[\"id\"];",
							"            pm.expect(match[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all matches for jwt2 w/ pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 200 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"correct number of matches in response\", function () {",
							"    //Check for correct number of matches",
							"    pm.expect(pm.response.json()[\"match\"].length).to.equal(5);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "add match w/ same gym & day",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 403 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This gym already has a match scheduled for the day indicated\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"female\",\n    \"day\": 2\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match"
					]
				}
			},
			"response": []
		},
		{
			"name": "full update match1 , user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 200 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Heart\",\n    \"league\": \"female\",\n    \"day\": 5\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "full update match7 , user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 200 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Winnow\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Winnow\",\n    \"league\": \"coed\",\n    \"day\": 5\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match/{{match07_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match07_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "full update match4 w/ same name/day",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 200 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(1);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"coed\",\n    \"day\": 1\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match/{{match04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "full update match 4 w/ invalid name/day",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 403 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This gym already has a match scheduled for the day indicated\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"coed\",\n    \"day\": 6\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match/{{match04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "full update match with missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is incorrect\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"coed\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "full update match with missing jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 401 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Authorization Token is Incorrect/Expired/Missing\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"coed\",\n    \"day\": 5\n}"
				},
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "full update match with invalid jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 401 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Authorization Token is Incorrect/Expired/Missing\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"coed\",\n    \"day\": 5\n}"
				},
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch match with invalid jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 401 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Authorization Token is Incorrect/Expired/Missing\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"league\": \"coed\",\n    \"day\": 5\n}"
				},
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "partial update match4, user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 200 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(1);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Heart\",\n    \"day\": 1\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match/{{match04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "partial update match4, user 1 invalid gym",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 403 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This gym already has a match scheduled for the day indicated\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Curtis\",\n    \"day\": 6\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match/{{match04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add ref1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"ref01_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"   //Check if status code is 201",
							"   pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Red\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Concannon\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([2,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fname\": \"Red\",\n    \"lname\": \"Concannon\",\n    \"certified\": true,\n    \"available\": [2,5,6]\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/ref",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref"
					]
				}
			},
			"response": []
		},
		{
			"name": "add ref2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"ref02_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"   //Check if status code is 201",
							"   pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Johnny\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Depp\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1,2,3,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fname\": \"Johnny\",\n    \"lname\": \"Depp\",\n    \"certified\": true,\n    \"available\": [1,2,3,5,6]\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/ref",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref"
					]
				}
			},
			"response": []
		},
		{
			"name": "add ref3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for new ref",
							"pm.environment.set(\"ref03_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"   //Check if status code is 201",
							"   pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Mary\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Lamb\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1,2,3,4,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fname\": \"Mary\",\n    \"lname\": \"Lamb\",\n    \"certified\": true,\n    \"available\": [1,2,3,4,5,6]\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/ref",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref"
					]
				}
			},
			"response": []
		},
		{
			"name": "add ref4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for ref4",
							"pm.environment.set(\"ref04_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"   //Check if status code is 201",
							"   pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Amber\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Heard\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(false);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fname\": \"Amber\",\n    \"lname\": \"Heard\",\n    \"certified\": false,\n    \"available\": [1]\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/ref",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref"
					]
				}
			},
			"response": []
		},
		{
			"name": "add ref5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for new ref",
							"pm.environment.set(\"ref05_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"   //Check if status code is 201",
							"   pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Granola\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Man\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([4,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fname\": \"Granola\",\n    \"lname\": \"Man\",\n    \"certified\": true,\n    \"available\": [4,5,6]\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/ref",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all refs w/o pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 Ok\", function () {",
							"    //Check for 200 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"ref01 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"refs\"].forEach(ref  =>{",
							"        if (ref[\"id\"] === pm.environment.get(\"ref01_id\")){",
							"            pm.expect(ref[\"fname\"]).to.eq(\"Red\");",
							"            pm.expect(ref[\"lname\"]).to.eq(\"Concannon\");",
							"            pm.expect(ref[\"certified\"]).to.eq(true);",
							"            pm.expect(ref[\"available\"]).deep.equal([2,5,6]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + ref[\"id\"];",
							"            pm.expect(ref[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"ref02 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"refs\"].forEach(ref  =>{",
							"        if (ref[\"id\"] === pm.environment.get(\"ref02_id\")){",
							"            pm.expect(ref[\"fname\"]).to.eq(\"Johnny\");",
							"            pm.expect(ref[\"lname\"]).to.eq(\"Depp\");",
							"            pm.expect(ref[\"certified\"]).to.eq(true);",
							"            pm.expect(ref[\"available\"]).deep.equal([1,2,3,5,6]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + ref[\"id\"];",
							"            pm.expect(ref[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"ref03 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"refs\"].forEach(ref  =>{",
							"        if (ref[\"id\"] === pm.environment.get(\"ref03_id\")){",
							"            pm.expect(ref[\"fname\"]).to.eq(\"Mary\");",
							"            pm.expect(ref[\"lname\"]).to.eq(\"Lamb\");",
							"            pm.expect(ref[\"certified\"]).to.eq(true);",
							"            pm.expect(ref[\"available\"]).deep.equal([1,2,3,4,5,6]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + ref[\"id\"];",
							"            pm.expect(ref[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"ref04 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"refs\"].forEach(ref  =>{",
							"        if (ref[\"id\"] === pm.environment.get(\"ref04_id\")){",
							"            pm.expect(ref[\"fname\"]).to.eq(\"Amber\");",
							"            pm.expect(ref[\"lname\"]).to.eq(\"Heard\");",
							"            pm.expect(ref[\"certified\"]).to.eq(false);",
							"            pm.expect(ref[\"available\"]).deep.equal([1]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + ref[\"id\"];",
							"            pm.expect(ref[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"ref05 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"refs\"].forEach(ref  =>{",
							"        if (ref[\"id\"] === pm.environment.get(\"ref05_id\")){",
							"            pm.expect(ref[\"fname\"]).to.eq(\"Granola\");",
							"            pm.expect(ref[\"lname\"]).to.eq(\"Man\");",
							"            pm.expect(ref[\"certified\"]).to.eq(true);",
							"            pm.expect(ref[\"available\"]).deep.equal([4,5,6]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + ref[\"id\"];",
							"            pm.expect(ref[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref"
					]
				}
			},
			"response": []
		},
		{
			"name": "add ref6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for new ref",
							"pm.environment.set(\"ref06_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"   //Check if status code is 201",
							"   pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Laura\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Much\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1,2,3,4,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fname\": \"Laura\",\n    \"lname\": \"Much\",\n    \"certified\": true,\n    \"available\": [1,2,3,4,5,6]\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/ref",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref"
					]
				}
			},
			"response": []
		},
		{
			"name": "add ref7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for new ref",
							"pm.environment.set(\"ref07_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"   //Check if status code is 201",
							"   pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Shelly\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Bass\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1,2,3,4,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fname\": \"Shelly\",\n    \"lname\": \"Bass\",\n    \"certified\": true,\n    \"available\": [1,2,3,4,5,6]\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/ref",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref"
					]
				}
			},
			"response": []
		},
		{
			"name": "add ref8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for new ref",
							"pm.environment.set(\"ref08_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"   //Check if status code is 201",
							"   pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"DD\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Bass\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1,2,3,4,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fname\": \"DD\",\n    \"lname\": \"Bass\",\n    \"certified\": true,\n    \"available\": [1,2,3,4,5,6]\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/ref",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref"
					]
				}
			},
			"response": []
		},
		{
			"name": "add ref with missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"   //Check if status code is 400",
							"   pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is incorrect\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fname\": \"Mary\",\n    \"lname\": \"Lamb\",\n    \"certified\": true\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/ref",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid delete ref route",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {\r",
							"    //Check for 405 status code\r",
							"    pm.response.to.have.status(405);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check if status code is 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Red\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Concannon\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([2,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all refs w/ pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 Ok\", function () {",
							"    //Check for 200 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"correct number of matches in response\", function () {",
							"    //Check for correct number of matches",
							"    pm.expect(pm.response.json()[\"refs\"].length).to.equal(5);",
							"});",
							"",
							"pm.test(\"ref01 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"refs\"].forEach(ref  =>{",
							"        if (ref[\"id\"] === pm.environment.get(\"ref01_id\")){",
							"            pm.expect(ref[\"fname\"]).to.eq(\"Red\");",
							"            pm.expect(ref[\"lname\"]).to.eq(\"Concannon\");",
							"            pm.expect(ref[\"certified\"]).to.eq(true);",
							"            pm.expect(ref[\"available\"]).deep.equal([2,5,6]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + ref[\"id\"];",
							"            pm.expect(ref[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"ref02 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"refs\"].forEach(ref  =>{",
							"        if (ref[\"id\"] === pm.environment.get(\"ref02_id\")){",
							"            pm.expect(ref[\"fname\"]).to.eq(\"Johnny\");",
							"            pm.expect(ref[\"lname\"]).to.eq(\"Depp\");",
							"            pm.expect(ref[\"certified\"]).to.eq(true);",
							"            pm.expect(ref[\"available\"]).deep.equal([1,2,3,5,6]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + ref[\"id\"];",
							"            pm.expect(ref[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"ref03 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"refs\"].forEach(ref  =>{",
							"        if (ref[\"id\"] === pm.environment.get(\"ref03_id\")){",
							"            pm.expect(ref[\"fname\"]).to.eq(\"Mary\");",
							"            pm.expect(ref[\"lname\"]).to.eq(\"Lamb\");",
							"            pm.expect(ref[\"certified\"]).to.eq(true);",
							"            pm.expect(ref[\"available\"]).deep.equal([1,2,3,4,5,6]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + ref[\"id\"];",
							"            pm.expect(ref[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"ref04 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"refs\"].forEach(ref  =>{",
							"        if (ref[\"id\"] === pm.environment.get(\"ref04_id\")){",
							"            pm.expect(ref[\"fname\"]).to.eq(\"Amber\");",
							"            pm.expect(ref[\"lname\"]).to.eq(\"Heard\");",
							"            pm.expect(ref[\"certified\"]).to.eq(false);",
							"            pm.expect(ref[\"available\"]).deep.equal([1]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + ref[\"id\"];",
							"            pm.expect(ref[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"ref05 content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.response.json()[\"refs\"].forEach(ref  =>{",
							"        if (ref[\"id\"] === pm.environment.get(\"ref05_id\")){",
							"            pm.expect(ref[\"fname\"]).to.eq(\"Granola\");",
							"            pm.expect(ref[\"lname\"]).to.eq(\"Man\");",
							"            pm.expect(ref[\"certified\"]).to.eq(true);",
							"            pm.expect(ref[\"available\"]).deep.equal([4,5,6]);",
							"            const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + ref[\"id\"];",
							"            pm.expect(ref[\"self\"]).to.eq(self_url);",
							"        }",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref"
					]
				}
			},
			"response": []
		},
		{
			"name": "full edit on ref1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"200 status code\", function () {",
							"   //Check if status code is 200",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Red\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Concanon\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([2,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fname\": \"Red\",\n    \"lname\": \"Concanon\",\n    \"certified\": true,\n    \"available\": [2,5,6]\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "partial edit on ref1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"200 status code\", function () {",
							"   //Check if status code is 200",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Red\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Concannon\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([2,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"lname\": \"Concannon\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref1 to match1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"    //create and check ref_url(s)",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref01_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url]);",
							"",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}/{{ref01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}",
						"{{ref01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "match1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref01_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url]);",
							"",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"   //pm.expect(pm.response.json()[\"refSelf\"]).to.eq(ref_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref1 after assigning match1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check if status code is 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Red\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Concannon\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([2,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref2 to match1(2nd ref)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"    //create and check ref_url(s)",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref01_id\");",
							"   const ref2_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref02_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url, ref2_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}/{{ref02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}",
						"{{ref02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref2 after assigning match 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"200 status code\", function () {",
							"   //Check if status code is 200",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Johnny\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Depp\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1,2,3,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/ref/{{ref02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid assign ref3 to match1(3rd ref)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for status code 403",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The ref is unavailable or max refs have already been reached for this match\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}/{{ref03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}",
						"{{ref03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign invalid ref to match2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for status code 404",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified match and/or ref does not exist\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}/{{invalid_ref_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}",
						"{{invalid_ref_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign valid ref to invalid match",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for status code 404",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified match and/or ref does not exist\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{invalid_match_id1}}/{{ref04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{invalid_match_id1}}",
						"{{ref04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign unavailable ref to match",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for status code 403",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The ref is unavailable or max refs have already been reached for this match\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}/{{ref04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}",
						"{{ref04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref to match without jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 401 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Authorization Token is Incorrect/Expired/Missing\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}/{{ref05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}",
						"{{ref05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref to match with invalid jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 401 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Authorization Token is Incorrect/Expired/Missing\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}/{{ref05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}",
						"{{ref05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref7 to match2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"    //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref07_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}/{{ref07_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}",
						"{{ref07_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref3 to match2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref07_id\");",
							"   const ref2_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref03_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url, ref2_url]);",
							"",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}/{{ref03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}",
						"{{ref03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref2 to match 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(6);",
							"",
							"    //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref02_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url]);",
							"",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match03_id}}/{{ref02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match03_id}}",
						"{{ref02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all refs info for match2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}/ref",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}",
						"ref"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete ref01 from match01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}/{{ref01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}",
						"{{ref01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref1 after deleting match1 assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check if status code is 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Red\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Concannon\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([2,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete ref02 from match03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match03_id}}/{{ref02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match03_id}}",
						"{{ref02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match01 after deleting ref1 from match",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref02_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "partial update for ref2, w/o available",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check if status code is 200",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Johnny\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Depp\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(false);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1,2,3,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"certified\": false\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match01 confirm ref2 still assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref02_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "partial update for ref2, w available",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check if status code is 200",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Johnny\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Depp\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1,2,5]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"certified\": true,\r\n    \"available\": [1,2,5]\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match01 confirm ref2 removed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref3 to match6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Reed\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(3);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref03_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match06_id}}/{{ref03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match06_id}}",
						"{{ref03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref3 to match3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(6);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref03_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match03_id}}/{{ref03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match03_id}}",
						"{{ref03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref3 to match4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(1);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref03_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match04_id}}/{{ref03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match04_id}}",
						"{{ref03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Mary\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Lamb\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([2,4]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref4 to match4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(1);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref03_id\");",
							"   const ref2_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref04_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url, ref2_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match04_id}}/{{ref04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match04_id}}",
						"{{ref04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch ref3, w/o available",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check if status code is 200",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Mary\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Poppins\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([2,4]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lname\": \"Poppins\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match02 after ref3 patch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref07_id\");",
							"   const ref2_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref03_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url,ref2_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "partial update for ref3, w available",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check if status code is 200",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Mary\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Limbo\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1,2,5]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lname\": \"Limbo\",\r\n    \"available\": [1,2,5]\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match02 after ref3 patch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref07_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid put for match6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for status code 400",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is incorrect\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/match/{{match06_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match06_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "full modify ref 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check if status code is 200",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Rashelly\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Bass\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1,2,3,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"fname\": \"Rashelly\",\r\n    \"lname\": \"Bass\",\r\n    \"certified\": true,\r\n    \"available\": [1,2,3,6]\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref07_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref07_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match02 after ref put",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref8 to match4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Heart\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(1);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref04_id\");",
							"   const ref2_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref08_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url,ref2_url]);",
							"",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match04_id}}/{{ref08_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match04_id}}",
						"{{ref08_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref1 to match3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(6);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref01_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match03_id}}/{{ref01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match03_id}}",
						"{{ref01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref5 to match3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(6);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref01_id\");",
							"   const ref2_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref05_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url,ref2_url]);",
							"",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match03_id}}/{{ref05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match03_id}}",
						"{{ref05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "partial update match3 w/o day",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 200 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(6);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref01_id\");",
							"   const ref2_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref05_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url, ref2_url]);",
							"",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"league\": \"coed\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match/{{match03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref1 after match2 patch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Red\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Concannon\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([2,5]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "partial update match3 w day",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 200 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(2);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"day\": 2\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match/{{match03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref1 after match3 day patch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Red\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Concannon\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([2,5]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "full update match4,user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 200 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Reed\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(1);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Reed\",\n    \"league\": \"female\",\n    \"day\": 1\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/match/{{match04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref4 after match4 full edit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Amber\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Heard\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(false);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref8 after match4 ful edit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"DD\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Bass\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1,2,3,4,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref08_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref08_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete ref8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref08_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref08_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref8 after deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"   //Check if status code is 404",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No ref with this ref_id exists\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref08_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref08_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete match01 user1 with user2 jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 no content\", function () {",
							"    //Check for appropriate 403 code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Current user is not authorized\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete match01 user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match01 after deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"   //Check if status code is 404",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No match with this match_id exists\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/match/{{match01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref6 to match4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Reed\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(1);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref06_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match04_id}}/{{ref06_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match04_id}}",
						"{{ref06_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "re-assign ref1 to match3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(2);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref01_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match03_id}}/{{ref01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match03_id}}",
						"{{ref01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "re-assign ref7 to match3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(2);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref01_id\");",
							"   const ref2_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref07_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url,ref2_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match03_id}}/{{ref07_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match03_id}}",
						"{{ref07_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "re-assign ref4 to match4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Reed\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"female\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(1);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref06_id\");",
							"   const ref2_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref04_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url,ref2_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match04_id}}/{{ref04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match04_id}}",
						"{{ref04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign ref5 to match2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref05_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}/{{ref05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}",
						"{{ref05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch user1 match with user2 jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 no content\", function () {",
							"    //Check for appropriate 403 code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Current user is not authorized\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch (same avail.) ref5 after match2 assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Granola\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Marvel\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(false);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([4]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lname\":\"Marvel\",\r\n    \"certified\":false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match2 after ref5 patch(no change to avail.)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref05_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch (new avail.) ref5, match2 assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Granola\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Marvelous\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(false);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([2,4,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lname\":\"Marvelous\",\r\n    \"available\":[2,4,5,6]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match2 after ref5 patch(no change to avail.) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "re-assign ref5 to match2 after patch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref05_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}/{{ref05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}",
						"{{ref05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put (full edit) ref5 after match2 assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Granola\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Man\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([4,5]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"fname\":\"Granola\",\r\n    \"lname\":\"Man\",\r\n    \"certified\":true,\r\n    \"available\":[4,5]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "re-assign ref5 to match2 after put",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref05_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}/{{ref05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}",
						"{{ref05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match2 after ref5 put",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"male\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(5);",
							"",
							"    //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref05_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete match2, (ref5 assigned)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref5 after match2 deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Granola\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Man\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([4,5]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete match04 (ref6,ref4 assigned)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for success 204 response code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref6 after match4 deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Laura\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Much\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1,2,3,4,5,6]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref06_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref06_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref4 after match4 deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"fname\"]).to.eq(\"Amber\");",
							"    pm.expect(pm.response.json()[\"lname\"]).to.eq(\"Heard\");",
							"    pm.expect(pm.response.json()[\"certified\"]).to.eq(false);",
							"    pm.expect(pm.response.json()[\"available\"]).deep.equal([1]);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/ref/{{ref04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete ref1, assigned to match3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match3 after ref 1 deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(2);",
							"",
							"   //Check if the ref url is correct",
							"   const ref1_url = pm.environment.get(\"app_url\") + \"/ref/\" + pm.environment.get(\"ref07_id\");",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([ref1_url]);",
							"   ",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete ref7 assignment from match3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match03_id}}/{{ref07_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match03_id}}",
						"{{ref07_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get match3 after ref 7 assignment deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Curtis\");",
							"   pm.expect(pm.response.json()[\"league\"]).to.eq(\"coed\");",
							"   pm.expect(pm.response.json()[\"day\"]).to.eq(2);",
							"   pm.expect(pm.response.json()[\"refs\"]).to.deep.equal([]);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/match/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ref 7 after assignment deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 200",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref07_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref07_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete match03 user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete match05 user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete match06 user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match06_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match06_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete match07 user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match07_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match07_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete match08 user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match08_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match08_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete match09 user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match09_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match09_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete match10 user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match10_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match10_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete match11 user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match11_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match11_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete match12 user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/match/{{match12_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"match",
						"{{match12_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete ref2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete ref3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete ref4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete ref5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete ref6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref06_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref06_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete ref7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/ref/{{ref07_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"ref",
						"{{ref07_id}}"
					]
				}
			},
			"response": []
		}
	]
}